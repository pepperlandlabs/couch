module.exports = new Shrink();
var check = require('validator').check
  , sanitize = require('validator').sanitize;

/**
 * Shrink is a basic url shortener for node
 */
function Shrink() {
  this.urlValidator = function(url) {
    var result = {};
    try {
      check(url).notEmpty().notNull().isUrl();
      result.status = true;
    } catch(e) {
      result.status = false;
      result.message = e.message;
    }
    return result;
  };
}


/**
 * shortens the given long url into a short one
 *
 * @param  {String|Object} urlData The URL string or the URL with it's alias
 * @return {Object}
 * @api public
 */
Shrink.prototype.shorten = function(urlData) {
  var result = this.urlValidator(urlData);
  if(result.status) {
    // Insert into database
    result.longUrl = urlData;
    result.message = 'Success';
    result.shortUrl = '';
  }
  return result;
};

/*
var BASE = 26,
  LEN = 3;

var powers = [];

for (var i = 0, LIMIT = 1; i < LEN; ++i, LIMIT *= BASE) {
  powers.push(LIMIT);
}

var c = [];

for (i = 0; i < LIMIT; ++i) {
  c.push(powers.map(function(basePower) {
    return Math.floor(i / basePower) % BASE;
  }));
}
 *****************
var inventory = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
// powers array of size 3 because the desired id is of length 3
// var base = inventory.length;
var base = 26;
// For scalability:
// var powers = [Math.pow(base, 0), Math.pow(base, 1), Math.pow(base, 2)];
// or better yet, you can use a for loop to iterate over the desired id length
var powers = [1, 26, 676];
var current = 0;
var id;
id = powers.map(function(power) {
  return inventory[Math.floor(current/power) % base];
});
id = id.join('');
 */